colnames(temp2)<-cmatlabs
rownames(temp2)<-rmatlabs
cat("\nWZMATRIX: W moderated paths moderated (1) and not moderated (0) by Z: \n")
print(temp2)
}
if (ncs > 0)
{colnames(ccmat)<-covnames
rownames(ccmat)<-rmatlabs
cat("\nCMATRIX: Covariates (columns) in (1) and not in (0) the models of M and Y (rows): \n")
print(ccmat)
}
}
#end print model matrices
if (criterr==0)
{
resultm<-resultm[2:nrow(resultm),]
bocaj<-matrix(as.numeric(resultm==99999),nrow=nrow(resultm))
bocaj<-(colSums(bocaj)==nrow(resultm))
bocaj<-matrix(1-as.numeric(bocaj))
j<-1
for (i in (1:ncol(resultm)))
{if (bocaj[i,1]==1){j<-j+1}}
resultm<-resultm[,1:(j-1)]
resultm[resultm==99999]<-NA
}
if ((outscreen==1) & (activate==0))
{cat("\n******************** ANALYSIS NOTES AND ERRORS ************************ \n")}
if (activate==1)
{cat("*********************************************************************** \n")}
if ((criterr==0) & (outscreen==1))
{
cat("\nLevel of confidence for all confidence intervals in output: ")
write.table(conf,quote=FALSE,row.names=FALSE,col.names=FALSE)
if (boot>0)
{
if ((goodboot==boot) & (bc==0))
{
cat("\nNumber of bootstraps for percentile bootstrap confidence intervals: ")
write.table(boot,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if ((goodboot==boot) & (bc==1))
{
cat("\nNumber of bootstraps for bias-corrected bootstrap confidence intervals: ")
write.table(boot,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if (length(badend) > 1)
{
cat("\nWARNING: Bootstrap CI endpoints below are not trustworthy. Decrease confidence\n")
cat("or increase the number of bootstrap samples.\n")
badend<-matrix(badend);badend<-t(badend[2:nrow(badend),1])
badend<-noquote(matrix(sprintf(decimals,badend),nrow=nrow(badend)))
write.table(badend,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
if (mc > 0)
{
cat("\nNumber of samples for Monte Carlo confidence intervals: ")
write.table(mc,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if ((wnotev > 0) & (printw==1))
{
if (wnotev==1)
{cat("\nW values in conditional tables are the 16th, 50th, and 84th percentiles.\n")}
if ((wnotev==2) & (minwwarn==0) & (maxwwarn==0))
{cat("\nW values in conditional tables are the mean and +/- SD from the mean.\n")}
if (minwwarn==1)
{cat("\nW values in conditional tables are the minimum, the mean, and 1 SD above the mean.\n")}
if (maxwwarn==1)
{cat("\nW values in conditional tables are 1 SD below the mean, the mean, and the maximum.\n")}
}
if ((znotev > 0) & (printz==1))
{
if (znotev==1)
{cat("\nZ values in conditional tables are the 16th, 50th, and 84th percentiles.\n")}
if ((znotev==2) & (minzwarn==0) & (maxzwarn==0))
{cat("\nZ values in conditional tables are the mean and +/- SD from the mean.\n")}
if (minzwarn==1)
{cat("\nZ values in conditional tables are the minimum, the mean, and 1 SD above the mean.\n")}
if (maxzwarn==1)
{cat("\nZ values in conditional tables are 1 SD below the mean, the mean, and the maximum.\n")}
}
if (minwwarn > 0)
{cat("\nNOTE: One SD below the mean is below the minimum observed in the data for W,\n")
cat("      so the minimum measurement on W is used for conditioning instead.\n")}
if (maxwwarn > 0)
{cat("\nNOTE: One SD above the mean is above the maximum observed in the data for W,\n")
cat("      so the maximum measurement on W is used for conditioning instead.\n")}
if (minzwarn > 0)
{cat("\nNOTE: One SD below the mean is below the minimum observed in the data for Z,\n")
cat("      so the minimum measurement on Z is used for conditioning instead.\n")}
if (maxzwarn > 0)
{cat("\nNOTE: One SD above the mean is above the maximum observed in the data for Z,\n")
cat("      so the maximum measurement on Z is used for conditioning instead.\n")}
if (pstog==1)
{cat("\nNOTE: Standardized coefficients for dichotomous or multicategorical X are\n")
cat("      in partially standardized form.\n")}
for (i in c(1:100))
{
if (notecode[i,1]==32)
{
cat("\n")
cat("Direct, indirect, and total effects are counterfactually defined \n")
if (xcontcf==0)
{
cat("assuming X by M interaction.\n")
}
if (xcontcf==1)
{
cat("assuming X by M interaction and with the following reference (x_ref) \n")
cat("and counterfactual (x_cf) states for X: \n")
xrefvals=t(xrefvals)
xrefvals<-noquote(matrix(sprintf(decimals,xrefvals),nrow=nrow(xrefvals)))
rownames(xrefvals)<-c("x_ref :","x_cf  :")
colnames(xrefvals)<-" "
print(xrefvals,right=T)
}
}
if (notecode[i,1]==1)
{cat(" \n")
cat("NOTE: COVMY is ignored when using CMATRIX option. \n")}
if (notecode[i,1]==2)
{cat(" \n")
cat("NOTE: Confidence level restricted to between 50 and 99.9999%. 95% confidence is provided in output. \n")}
if (notecode[i,1]==3)
{cat(" \n")
cat("NOTE: The following variables were mean centered prior to analysis: \n")
centvar<-c("      ", centvar)
centvar<-t(noquote(centvar))
write.table(centvar,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if ((notecode[i,1]==4) & (ydich != 1))
{cat(" \n")
cat("NOTE: A heteroscedasticity consistent standard error and covariance matrix estimator was used. \n")}
if (notecode[i,1]==6)
{cat(" \n")
cat("NOTE: Due to estimation problems, some bootstrap samples had to be replaced. \n")
cat("      The number of times this happened was: ")
write.table(badboot,quote=FALSE,row.names=FALSE,col.names=FALSE)}
if (notecode[i,1]==7)
{cat(" \n")
cat("NOTE: The bootstrapping was not completed due to problematic bootstrap samples. \n")
cat("      Bootstrap confidence intervals are therefore suppressed.\n")}
if (notecode[i,1]==8)
{cat(" \n")
cat("NOTE: The number of bootstrap samples was adjusted upward given your desired confidence. \n")}
if (notecode[i,1]==9)
{cat(" \n")
cat("NOTE: WMODVAL is ignored when W is specified as multicategorical. \n")}
if (notecode[i,1]==10)
{cat(" \n")
cat("NOTE: ZMODVAL is ignored when Z is specified as multicategorical. \n")}
if (notecode[i,1]==11)
{cat(" \n")
cat("NOTE: Total effect model generated only when all covariates are specified\n")
cat("      in all models of M and Y.\n")}
if (notecode[i,1]==12)
{cat(" \n")
cat("NOTE: Total effect model generated only when X is freely estimated to\n")
cat("      affect each M and both X and M are freely estimated to affect Y.\n")}
if (notecode[i,1]==30)
{cat(" \n")
cat("NOTE: Your vector of linear hypothesis weights is of the wrong length for this model. \n")}
if (notecode[i,1]==13)
{cat(" \n")
cat("NOTE: There are too many pairwise contrasts to conduct with this model. \n")}
if (notecode[i,1]==14)
{cat(" \n")
cat("NOTE: The number of contrast weights must equal the number of indirect effects. \n")}
if (notecode[i,1]==15)
{cat(" \n")
cat("NOTE: Monte Carlo confidence intervals not available for this model. \n")
cat("      Bootstrapping is used instead.\n")}
if (notecode[i,1]==16)
{cat(" \n")
cat("NOTE: The number of Monte Carlo samples was adjusted upward given your desired confidence. \n")}
if (notecode[i,1]==19)
{cat(" \n")
cat("NOTE: Your contrast matrix is invalid or not applicable to this model. \n")}
if (notecode[i,1]==20)
{cat(" \n")
cat("NOTE: One of the groups specified by your contrast matrix does not exist in the data. \n")}
if (notecode[i,1]==24)
{cat(" \n")
cat("NOTE: Total effect model not available with dichotomous Y. \n")}
if (notecode[i,1]==25)
{cat(" \n")
cat("NOTE: STAND/EFFSIZE options not available with dichotomous Y. \n")}
if (notecode[i,1]==27)
{cat(" \n")
cat("NOTE: Standardized coefficients not available for models with moderators. \n")}
if (notecode[i,1]==28)
{cat(" \n")
cat("NOTE: The contrast option is not available with a multicategorical X. \n")}
if (notecode[i,1]==31)
{
medmean2<-noquote(matrix(sprintf(decimals,medmeans),nrow=nrow(medmeans)))
rownames(medmean2)<-" "
colnames(medmean2)<-mnames
if (nms > 1)
{
cat(" \n")
cat("NOTE: Controlled direct effect(s) estimated at the following mediator values: \n")
}
if (nms==1)
{
cat(" \n")
cat("NOTE: Controlled direct effect(s) estimated at the following mediator value: \n")
}
print(medmean2,right=T)
}
if (notecode[i,1]==33)
{cat(" \n")
cat("NOTE: Sobel test is not available when using the XMINT option. \n")}
if (notecode[i,1]==34)
{cat(" \n")
cat("NOTE: Standardized effects are not available when using the XMINT option. \n")}
if (notecode[i,1]==36)
{cat(" \n")
cat("NOTE: The XREFVAL option is ignored when X is declared as multicategorical. \n")}
if (notecode[i,1]==37)
{cat(" \n")
cat("NOTE: The CONTRAST option is not available when using the XMINT option. \n")}
if (notecode[i,1]==38)
{cat(" \n")
cat("NOTE: One or more cases were deleted prior to analysis at your request. \n")}
if (notecode[i,1]==35)
{cat(" \n")
cat("NOTE: Counterfactual effects estimated at the following covariate values: \n")
coval2<-noquote(matrix(sprintf(decimals,coval),nrow=nrow(coval)))
rownames(coval2)<-" "
colnames(coval2)<-covnames
print(coval2,right=T)}
if ((notecode[i,1]==29) & (listmiss==1))
{cat(" \n")
a<-missrow;conum<-ncol(missrow);allgood<-0;smremain<-12;largesti<-1;smallrow<-0;
if (conum > 12)
{
for (ii in c(1:12))
{
check<-(conum/ii);
if (check==trunc(check))
{
check2<-conum/ii;aok<-ii
if (aok > 2){allgood<-1}
}
if (check != trunc(check))
{
remain<-conum-(ii*trunc(check))
if (remain <= smremain)
{smremain<-remain;largesti<-ii;smallrow<-trunc(conum/largesti)}
}
}
atemp<-a[1,1:(aok*check2)]
atemp<-matrix(atemp,nrow=check2,byrow=TRUE)
cat("NOTE: Missing data resulted in the deletion of the following row(s) of: \n")
cat("      data from the analysis: \n")
if (ncol(atemp) > 2)
{prmatrix(atemp, rowlab=rep("    ",nrow(atemp)),collab=rep("    ",ncol(atemp)))}
if (allgood==0)
{
atemp<-a[1,1:(smallrow*largesti)]
atemp<-matrix(atemp,nrow=smallrow,byrow=TRUE)
btemp<-matrix(a[1,((largesti*smallrow)+1):conum])
prmatrix(atemp,rowlab=rep("    ",nrow(atemp)),collab=rep("    ",ncol(atemp)))
prmatrix(btemp,rowlab=rep("    ",1),collab=rep("    ",ncol(btemp)))
}
}
if (conum <= 12)
{
cat("NOTE: Missing data resulted in the deletion of the following row(s) of \n")
cat("      data from the analysis: \n")
prmatrix(a, rowlab=rep("    ",nrow(a)), collab=rep("    ",ncol(a)))
}
}
}
if ((nmiss > 0) & (listmiss==0))
{cat(" \n")
cat("NOTE: Some cases with missing data were deleted. The number of deleted cases was: ")
write.table(nmiss,quote=FALSE,row.names=FALSE,col.names=FALSE)}
}
# print errors
for (i in c(1:100))
{
if (errcode[i,1]==1)
{cat(" \n")
cat("ERROR: You must specify a Y and an X variable. \n")}
if (errcode[i,1]==2)
{cat(" \n")
cat("ERROR: X, M, or Y variable used more than once or W and Z are the same variable. \n")}
if (errcode[i,1]==3)
{cat(" \n")
cat("ERROR: You have specified more than one variable for W, Y, X, or Z. \n")}
if (errcode[i,1]==4)
{cat(" \n")
cat("ERROR: A variable specified as multicategorical has more than nine categories. \n")}
if (errcode[i,1]==5)
{cat(" \n")
cat("ERROR: One of the categories contains only a single case. \n")}
if (errcode[i,1]==6)
{cat(" \n")
cat("ERROR: Invalid model number in this version of PROCESS. \n")}
if (errcode[i,1]==7)
{cat(" \n")
cat("ERROR: Invalid model number. \n")}
if (errcode[i,1]==8)
{cat(" \n")
cat("ERROR: You must specify an M variable for this model. \n")}
if (errcode[i,1]==9)
{cat(" \n")
cat("ERROR: You have specified an M variable in a model that does not use it. \n")}
if (errcode[i,1]==10)
{cat(" \n")
cat("ERROR: You have specified a W variable in a model that does not use it. \n")}
if (errcode[i,1]==11)
{cat(" \n")
cat("ERROR: You have not specified a W variable in a model that requires it. \n")}
if (errcode[i,1]==12)
{cat(" \n")
cat("ERROR: You have specified a Z variable in a model that does not use it. \n")}
if (errcode[i,1]==13)
{cat(" \n")
cat("ERROR: You have not specified a Z variable in a model that requires it. \n")}
if (errcode[i,1]==15)
{cat(" \n")
cat("ERROR: One of your model variables exhibits no variation (it is a constant). \n")}
if (errcode[i,1]==16)
{cat(" \n")
cat("ERROR: BMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==17)
{cat(" \n")
cat("ERROR: WMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==18)
{cat(" \n")
cat("ERROR: ZMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==19)
{cat(" \n")
cat("ERROR: WZMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==20)
{cat(" \n")
cat("ERROR: A path fixed at zero cannot be moderated. \n")}
if (errcode[i,1]==60)
{cat(" \n")
cat("PROCESS is now ready for use.\n")
cat("Copyright 2020-2023 by Andrew F. Hayes ALL RIGHTS RESERVED\n")
cat("Workshop schedule at http://haskayne.ucalgary.ca/CCRAM\n \n")}
if (errcode[i,1]==21)
{cat(" \n")
cat("ERROR: If only one moderator is specified, it must be specified as W. \n")}
if (errcode[i,1]==22)
{cat(" \n")
cat("ERROR: In BMATRIX, X must be specified to affect at least one variable. \n")}
if (errcode[i,1]==23)
{cat(" \n")
cat("ERROR: In BMATRIX, at least one variable must be specified to affect Y. \n")}
if (errcode[i,1]==24)
{cat(" \n")
cat("ERROR: You must specify a model number or a custom BMATRIX specification. \n")}
if (errcode[i,1]==25)
{cat(" \n")
cat("ERROR: BMATRIX cannot be used in conjunction with a model number. \n")}
if (errcode[i,1]==26)
{cat(" \n")
cat("ERROR: Your model has a dangling mediator (all Ms must affect and be affected). \n")}
if (errcode[i,1]==29)
{cat(" \n")
cat("ERROR: CMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==30)
{cat(" \n")
cat("ERROR: In CMATRIX, all covariates must be assigned to an M or a Y. \n")}
if ((errcode[i,1]==31) & (singlr==0))
{cat(" \n")
singlr<-1
cat("ERROR: A linear or near linear dependence (singularity) exists in the data. \n")}
if (errcode[i,1]==32)
{cat(" \n")
cat("ERROR: Models 80 and 81 require between 3 and 6 mediators. \n")}
if (errcode[i,1]==33)
{cat(" \n")
cat("ERROR: Model 82 requires 4 mediators. \n")}
if (errcode[i,1]==34)
{cat(" \n")
cat("ERROR: This model number requires between 2 and 6 mediators. \n")}
if (errcode[i,1]==35)
{cat(" \n")
cat("ERROR: In a model with only one moderator, that moderator must be W. \n")}
if (errcode[i,1]==36)
{cat(" \n")
cat("ERROR: A serial mediation model cannot have more than 6 mediators. \n")}
if (errcode[i,1]==37)
{cat(" \n")
cat("ERROR: No more than 10 mediators are allowed in a PROCESS command. \n")}
if (errcode[i,1]==38)
{cat(" \n")
cat("ERROR: XCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==39)
{cat(" \n")
cat("ERROR: WCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==40)
{cat(" \n")
cat("ERROR: ZCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==41)
{cat(" \n")
cat("ERROR: Models 1, 2, and 3 cannot be customized. \n")}
if (errcode[i,1]==43)
{cat(" \n")
cat("ERROR: PROCESS does not allow dichotomous mediators. \n")}
if (errcode[i,1]==50)
{cat(" \n")
cat("ERROR: A multicategorical moderator cannot be specified as a covariate. \n")}
if (errcode[i,1]==51)
{cat(" \n")
cat("ERROR: A variable you specified as a covariate is a moderator in all equations. \n")}
if (errcode[i,1]==62)
{cat(" \n")
cat("ERROR: After listwise deletion of cases with missing data, too few cases remain. \n")}
if (errcode[i,1]==63)
{cat(" \n")
cat("ERROR: The XMINT option is available only for model 4. \n")}
if (errcode[i,1]==64)
{cat(" \n")
cat("ERROR: Incorrect number of values specified in CDEVAL option. \n")}
if (errcode[i,1]==65)
{cat(" \n")
cat("ERROR: Only indicator or sequential coding of X is allowed with the XMINT option. \n")}
if (errcode[i,1]==66)
{cat(" \n")
cat("ERROR: A reference value of X is required for this model. \n")}
if (errcode[i,1]==67)
{cat(" \n")
cat("ERROR: Too many elements provided in XREFVAL option. \n")}
if (errcode[i,1]==68)
{cat(" \n")
cat("ERROR: Covariate assignment is not allowed with the XMINT option. \n")}
if (errcode[i,1]==69)
{cat(" \n")
cat("ERROR: Incorrect number of values specified in COVAL option. \n")}
if (errcode[i,1]==70)
{cat(" \n")
cat("ERROR: Incorrect value(s) in XREFVAL for this dichotomous X variable. \n")}
if (errcode[i,1]==71)
{cat(" \n")
cat("ERROR: The CENTER option is not available when using the XMINT option. \n")}
if (errcode[i,1]==72)
{cat(" \n")
cat("ERROR: The XMINT option is not available for models with a dichotomous Y. \n")}
if ((errcode[i,1]==52) & (mcerpt==0))
{mcerpt<-1
cat(" \n")
cat("ERROR: A variable specified as multicategorical must have at least three categories. \n")}
if (errcode[i,1]==53)
{cat(" \n")
cat("ERROR: Variables declared as factors or that are non-numeric are not accepted by PROCESS.\n")}
}
#if (saveboot==1)
#{resultm<-list(resultm,boots)}
#invisible(resultm)
resultms<-NULL
if ((saveboot==0) & (saveest==1)){resultms<-resultm}
if ((saveboot==1) & (saveest==0)){resultms<-boots}
if ((saveboot==1) & (saveest==1)){resultms<-(list(boots,resultm))}
invisible(resultms)
}
process(activate=1)
#HAYES MEDIATION
process(data = followup_scored, y = "CD.RISC_total_scaled", x = "threat_sum_scaled", m ="AIMS_current_total_scaled", model = 4, seed = seed)
#HAYES MEDIATION
process(data = followup_scored, y = "CD.RISC_total_scaled", x = "CHAOS_sum_scaled", m ="AIMS_current_total_scaled", model = 4, seed = seed)
#HAYES MEDIATION
process(data = followup_scored, y = "CD.RISC_total_scaled", x = "CHAOS_child_scaled", m ="AIMS_current_total_scaled", model = 4, seed = seed)
#HAYES MEDIATION
process(data = followup_scored, y = "CD.RISC_total_scaled", x = "CHAOS_adolescence_scaled", m ="AIMS_current_total_scaled", model = 4, seed = seed)
#HAYES MEDIATION
process(data = followup_scored, y = "CD.RISC_total_scaled", x = "CHAOS_child_scaled", m ="AIMS_current_total_scaled", model = 4, seed = seed)
#HAYES MEDIATION
process(data = followup_scored, y = "CD.RISC_total_scaled", x = "threat_sum_scaled", m ="AIMS_current_total_scaled", model = 4, seed = seed)
library(tidyverse)
library(lmerTest)
library(MuMIn)
library(AICcmodavg)
library(sjPlot)
library(corrplot)
library(psych)
library(ggrepel)
all_scored <- read.csv(file="../../data/pleasing-displeasing_followup/music_usage/all_scored.csv")
table(all_scored$What.sex.were.you.assigned.at.birth.)
HUMS_Absorption <- all_scored %>%
select(BMRQ_absorption, HUMS_adult_healthy, HUMS_adult_unhealthy) %>%
pivot_longer(HUMS_adult_healthy:HUMS_adult_unhealthy, names_to = "type", values_to = "HUMS")
View(HUMS_Absorption)
HUMS_Absorption$type <- ifelse(HUMS_Absorption$type=="HUMS_adult_unhealthy", "Unhealthy", "Healthy")
m1 <- lm(scale(CD.RISC_totl) ~ scale(deprivation_sum)*scale(BMRQ_absorption), data=all_scored)
m1 <- lm(scale(CD.RISC_total) ~ scale(deprivation_sum)*scale(BMRQ_absorption), data=all_scored)
summary(m1)
View(all_scored)
HUMS_Absorption <- all_scored %>%
select(BMRQ_absorption, HUMS_adult_healthy, HUMS_adult_unhealthy, ID) %>%
pivot_longer(HUMS_adult_healthy:HUMS_adult_unhealthy, names_to = "type", values_to = "HUMS")
View(HUMS_Absorption)
m3 <- lmer(HUMS ~ BMRQ_absorption*type + (1|ID))
m3 <- lmer(HUMS ~ BMRQ_absorption*type + (1|ID), data=HUMS_Absorption)
summary(m3)
m3 <- lmer(scale(HUMS) ~ scale(BMRQ_absorption)*type + (1|ID), data=HUMS_Absorption)
summary(m3)
m3 <- lmer(scale(HUMS) ~ scale(BMRQ_absorption)*type + (scale(BMRQ_absorption)|ID), data=HUMS_Absorption)
m3 <- lmer(scale(HUMS) ~ scale(BMRQ_absorption)*type + (type|ID), data=HUMS_Absorption)
m3 <- lmer(scale(HUMS) ~ scale(BMRQ_absorption)*type + (1|ID), data=HUMS_Absorption)
summary(m3)
contrasts(HUMS_Absorption$type) <- c(-0.5,0.5)
HUMS_Absorption$type <- as.factor(HUMS_Absorption$type)
contrasts(HUMS_Absorption$type) <- c(-0.5,0.5)
m3 <- lmer(scale(HUMS) ~ scale(BMRQ_absorption)*type + (1|ID), data=HUMS_Absorption)
summary(m3)
